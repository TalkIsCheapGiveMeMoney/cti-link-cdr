<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:redis="http://www.springframework.org/schema/redis" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd

		   http://www.springframework.org/schema/redis http://www.springframework.org/schema/redis/spring-redis.xsd">

	<!-- 读取属性文件 -->
	<bean id="propertyConfigurer" class="com.tinet.ctilink.util.PropertyUtil">
		<property name="locations">
			<list>
				<value>classpath*:app.properties</value>
			</list>
		</property>
	</bean>
	<!-- 定义Redis连接池 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="20" />
		<property name="maxIdle" value="20" />
		<property name="minIdle" value="5" />
	</bean>

	<!-- 定义Spring Redis连接工厂 -->
	<bean id="redisConnectionFactory" class="com.tinet.ctilink.jedis.CtiLinkJedisConnectionFactory">
		<property name="hostName" value="${redis.url}" />
		<property name="port" value="${redis.port}" />
		<property name="database" value="0" />
		<property name="usePool" value="true" />
		<property name="poolConfig" ref="jedisPoolConfig" />
	</bean>

	<!-- 定义Spring Redis的序列化器 -->
	<bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer" />
	<bean id="jsonRedisSerializer" class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />

	<!-- 定义Spring Redis模板 -->
	<bean id="redisTemplate" class="com.tinet.ctilink.cache.RedisTemplate">
		<property name="connectionFactory" ref="redisConnectionFactory" />
	</bean>

	<bean id="redisService" class="com.tinet.ctilink.cache.RedisService" />

	<!-- 定义接收Queue事件的Redis消息监听器 -->
	<bean id="queueEventListener" class="com.tinet.ctilink.cdr.event.listener.QueueEventListener" />
	<!-- 注册Redis消息订阅的监听器 -->
	<redis:listener-container>
		<redis:listener ref="queueEventListener" serializer="stringRedisSerializer" method="handleMessage" topic="cti-link.queue.event" />
	</redis:listener-container>

	<!-- 定义接收Anchor事件的Redis消息监听器 -->
	<bean id="anchorEventListener" class="com.tinet.ctilink.cdr.event.listener.AnchorEventListener" />
	<!-- 注册Redis消息订阅的监听器 -->
	<redis:listener-container>
		<redis:listener ref="anchorEventListener" serializer="stringRedisSerializer" method="handleMessage" topic="cti-link.ivr.anchor.event" />
	</redis:listener-container>

	<!-- 注入Spring上下文 -->
	<bean id="contextUtil" class="com.tinet.ctilink.util.ContextUtil" />

	<!-- AWS sqs -->
	<bean id="awsCredentials" class="com.amazonaws.auth.BasicAWSCredentials">
		<constructor-arg index="0" value="${aws.accessKey}"/>
		<constructor-arg index="1" value="${aws.secretAccessKey}"/>
	</bean>
	<bean id="sqsClient"  class="com.amazonaws.services.sqs.AmazonSQSClient">
		<constructor-arg index="0" ref="awsCredentials"/>
	</bean>
	<bean id="awsSQSService"  class="com.tinet.ctilink.aws.AwsSQSService">
		<property name="sqsClient" ref="sqsClient"/>
	</bean>

	<!-- 消息队列配置 -->
	<bean id="cdrMessageQueue" class="com.tinet.ctilink.mq.AmazonSQS">
		<property name="awsSQSService" ref="awsSQSService" />
		<property name="sqsName" value="${aws.sqs.cdr.name}" />
	</bean>

	<bean id="investigationMessageQueue" class="com.tinet.ctilink.mq.AmazonSQS">
		<property name="awsSQSService" ref="awsSQSService" />
		<property name="sqsName" value="${aws.sqs.cdr.investigation.name}" />
	</bean>

	<bean id="queueEventMessageQueue" class="com.tinet.ctilink.mq.AmazonSQS">
		<property name="awsSQSService" ref="awsSQSService" />
		<property name="sqsName" value="${aws.sqs.cdr.queueEvent.name}" />
	</bean>

	<bean id="anchorEventMessageQueue" class="com.tinet.ctilink.mq.AmazonSQS">
		<property name="awsSQSService" ref="awsSQSService" />
		<property name="sqsName" value="${aws.sqs.cdr.anchorEvent.name}" />
	</bean>

	<!-- AWS dynamoDB -->
	<bean id="dynamoDBClient" class="com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient">
		<constructor-arg index="0" ref="awsCredentials" />
	</bean>

	<bean id="awsDynamoDBService" class="com.tinet.ctilink.aws.AwsDynamoDBService">
		<property name="amazonDynamoDB" ref="dynamoDBClient" />
	</bean>

</beans>